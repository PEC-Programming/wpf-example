//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace Нармодник
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class deuser0Entities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект deuser0Entities, используя строку соединения из раздела "deuser0Entities" файла конфигурации приложения.
        /// </summary>
        public deuser0Entities() : base("name=deuser0Entities", "deuser0Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта deuser0Entities.
        /// </summary>
        public deuser0Entities(string connectionString) : base(connectionString, "deuser0Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта deuser0Entities.
        /// </summary>
        public deuser0Entities(EntityConnection connection) : base(connection, "deuser0Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<client> client
        {
            get
            {
                if ((_client == null))
                {
                    _client = base.CreateObjectSet<client>("client");
                }
                return _client;
            }
        }
        private ObjectSet<client> _client;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet client. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToclient(client client)
        {
            base.AddObject("client", client);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="deuser0Model", Name="client")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class client : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта client.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        public static client Createclient(global::System.Int32 id)
        {
            client client = new client();
            client.id = id;
            return client;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String fio
        {
            get
            {
                return _fio;
            }
            set
            {
                OnfioChanging(value);
                ReportPropertyChanging("fio");
                _fio = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("fio");
                OnfioChanged();
            }
        }
        private global::System.String _fio;
        partial void OnfioChanging(global::System.String value);
        partial void OnfioChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String sex
        {
            get
            {
                return _sex;
            }
            set
            {
                OnsexChanging(value);
                ReportPropertyChanging("sex");
                _sex = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("sex");
                OnsexChanged();
            }
        }
        private global::System.String _sex;
        partial void OnsexChanging(global::System.String value);
        partial void OnsexChanged();

        #endregion

    
    }

    #endregion

    
}
